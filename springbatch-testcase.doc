import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.job.builder.StepBuilder;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.*;
import org.springframework.batch.test.JobLauncherTestUtils;
import org.springframework.batch.test.context.SpringBatchTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@SpringBatchTest
@SpringBootTest
class BatchJobTest {

    @Autowired
    private JobLauncherTestUtils jobLauncherTestUtils;

    @Autowired
    private ExternalApiService externalApiService;

    @Autowired
    private MockWriter mockWriter;

    @BeforeEach
    void setup() {
        reset(externalApiService, mockWriter);
    }

    @Test
    void testBatchJob_withMockReaderWriter() throws Exception {
        // given - mock input "table1" record
        List<String> mockInput = Collections.singletonList("record1");

        // mock external API response
        when(externalApiService.callExternalApi("record1")).thenReturn("response1");

        // run job
        JobExecution jobExecution = jobLauncherTestUtils.launchJob();

        // then
        assertThat(jobExecution.getExitStatus().getExitCode()).isEqualTo("COMPLETED");

        // verify API call
        verify(externalApiService, times(1)).callExternalApi("record1");

        // verify data written to "table2"
        verify(mockWriter, times(1)).write(Collections.singletonList("response1"));
    }

    @Configuration
    static class TestConfig {

        @Bean
        ExternalApiService externalApiService() {
            return Mockito.mock(ExternalApiService.class);
        }

        @Bean
        MockWriter mockWriter() {
            return Mockito.spy(new MockWriter());
        }

        @Bean
        ItemReader<String> mockReader() {
            // Instead of DB, simulate H2 "table1" data
            return new ItemReader<>() {
                private final List<String> data = Arrays.asList("record1");
                private int index = 0;

                @Override
                public String read() {
                    if (index < data.size()) {
                        return data.get(index++);
                    }
                    return null;
                }
            };
        }

        @Bean
        ItemProcessor<String, String> processor(ExternalApiService api) {
            return api::callExternalApi;
        }

        @Bean
        ItemWriter<String> writer(MockWriter writer) {
            return writer;
        }

        @Bean
        Step step(ItemReader<String> reader,
                  ItemProcessor<String, String> processor,
                  ItemWriter<String> writer) {
            return new StepBuilder("step")
                    .<String, String>chunk(1)
                    .reader(reader)
                    .processor(processor)
                    .writer(writer)
                    .build();
        }

        @Bean
        Job job(Step step) {
            return new JobBuilder("job")
                    .incrementer(new RunIdIncrementer())
                    .start(step)
                    .build();
        }

        @Bean
        JobLauncherTestUtils jobLauncherTestUtils(Job job) {
            JobLauncherTestUtils utils = new JobLauncherTestUtils();
            utils.setJob(job);
            return utils;
        }
    }

    static class MockWriter implements ItemWriter<String> {
        @Override
        public void write(List<? extends String> items) {
            // Simulate writing to "table2"
            System.out.println("Writing to table2: " + items);
        }
    }

    interface ExternalApiService {
        String callExternalApi(String input);
    }
}
***************partitioning ********

@Bean
public PartitionHandler partitionHandler() {
    return new TaskExecutorPartitionHandler() {{
        setGridSize(4); // 4 partitions
        setTaskExecutor(new SimpleAsyncTaskExecutor());
    }};
}

@Bean
public Partitioner partitioner(EntityManager em) {
    return gridSize -> {
        Map<String, ExecutionContext> partitions = new HashMap<>();
        Long minId = (Long) em.createQuery("SELECT MIN(e.id) FROM MyEntity e WHERE e.status = 'NEW'").getSingleResult();
        Long maxId = (Long) em.createQuery("SELECT MAX(e.id) FROM MyEntity e WHERE e.status = 'NEW'").getSingleResult();
        
        long targetSize = (maxId - minId) / gridSize + 1;

        long start = minId;
        long end = start + targetSize - 1;

        for (int i = 0; i < gridSize; i++) {
            ExecutionContext ctx = new ExecutionContext();
            ctx.putLong("minId", start);
            ctx.putLong("maxId", end);
            partitions.put("partition" + i, ctx);
            start += targetSize;
            end += targetSize;
        }
        return partitions;
    };
}
